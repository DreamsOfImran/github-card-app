{"version":3,"sources":["hooks/useLocalStorage.js","components/Editor.js","components/App.js","index.js"],"names":["useLocalStorage","key","initialValue","prefixedKey","useState","jsonValue","localStorage","getItem","JSON","parse","value","setValue","useEffect","setItem","stringify","Editor","displayName","onChange","language","open","setOpen","className","type","onClick","icon","faCompressAlt","faExpandAlt","onBeforeChange","editor","data","options","lineWrapping","lint","mode","lineNumbers","theme","App","html","setHtml","css","setCss","js","setJs","srcDoc","setSrcDoc","timeout","setTimeout","clearTimeout","title","sandbox","frameBorder","width","height","ReactDOM","render","document","getElementById"],"mappings":"2KAyBeA,EArBS,SAACC,EAAKC,GAC5B,IAAMC,EAHO,aAGgBF,EADgB,EAGnBG,oBAAS,WACjC,IAAMC,EAAYC,aAAaC,QAAQJ,GACvC,OAAgB,MAAbE,EAA0BG,KAAKC,MAAMJ,GAEb,oBAAjBH,EACDA,IAEAA,KAVkC,mBAGtCQ,EAHsC,KAG/BC,EAH+B,KAkB7C,OAJAC,qBAAU,WACRN,aAAaO,QAAQV,EAAaK,KAAKM,UAAUJ,MAChD,CAACP,EAAaO,IAEV,CAACA,EAAOC,I,8DCuBFI,EAlCA,SAAC,GAAgD,IAA9CC,EAA6C,EAA7CA,YAAaN,EAAgC,EAAhCA,MAAOO,EAAyB,EAAzBA,SAAUC,EAAe,EAAfA,SAAe,EACrCd,oBAAS,GAD4B,mBACtDe,EADsD,KAChDC,EADgD,KAM7D,OACE,sBAAKC,UAAS,2BAAsBF,EAAO,GAAK,aAAhD,UACE,sBAAKE,UAAU,eAAf,UACGL,EACD,wBACEM,KAAK,SACLD,UAAU,sBACVE,QAAS,kBAAMH,GAASD,IAH1B,SAKE,cAAC,IAAD,CAAiBK,KAAML,EAAOM,IAAgBC,WAGlD,cAAC,aAAD,CACEC,eAhBe,SAACC,EAAQC,EAAMnB,GAClCO,EAASP,IAgBLA,MAAOA,EACPW,UAAU,sBACVS,QAAS,CACPC,cAAc,EACdC,MAAM,EACNC,KAAMf,EACNgB,aAAa,EACbC,MAAO,iBCsBFC,EAxDH,WAAO,IAAD,EACQpC,EAAgB,IADxB,mBACTqC,EADS,KACHC,EADG,OAEMtC,EAAgB,IAFtB,mBAETuC,EAFS,KAEJC,EAFI,OAGIxC,EAAgB,IAHpB,mBAGTyC,EAHS,KAGLC,EAHK,OAIYtC,mBAAS,IAJrB,mBAITuC,EAJS,KAIDC,EAJC,KAoBhB,OAdAhC,qBAAU,WACR,IAAMiC,EAAUC,YAAW,WACzBF,EAAU,qCAAD,OAEGP,EAFH,qCAGIE,EAHJ,uCAIKE,EAJL,0CAOR,KAEH,OAAO,kBAAMM,aAAaF,MACzB,CAACR,EAAME,EAAKE,IAGb,qCACE,sBAAKpB,UAAU,gBAAf,UACE,cAAC,EAAD,CACEH,SAAS,MACTF,YAAY,OACZN,MAAO2B,EACPpB,SAAUqB,IAEZ,cAAC,EAAD,CACEpB,SAAS,MACTF,YAAY,MACZN,MAAO6B,EACPtB,SAAUuB,IAEZ,cAAC,EAAD,CACEtB,SAAS,aACTF,YAAY,KACZN,MAAO+B,EACPxB,SAAUyB,OAGd,qBAAKrB,UAAU,OAAf,SACE,wBACEsB,OAAQA,EACRK,MAAM,SACNC,QAAQ,gBACRC,YAAY,IACZC,MAAM,OACNC,OAAO,e,MC/CjBC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.7e7a9ead.chunk.js","sourcesContent":["import { useState, useEffect } from 'react'\n\nconst PREFIX = 'code-edit-'\n\nconst useLocalStorage = (key, initialValue) => {\n  const prefixedKey = PREFIX + key\n\n  const [value, setValue] = useState(() => {\n    const jsonValue = localStorage.getItem(prefixedKey)\n    if(jsonValue != null) return JSON.parse(jsonValue)\n\n    if(typeof initialValue === 'function') {\n      return initialValue()\n    } else {\n      return initialValue\n    }\n  })\n\n  useEffect(() => {\n    localStorage.setItem(prefixedKey, JSON.stringify(value))\n  }, [prefixedKey, value])\n\n  return [value, setValue]\n}\n\nexport default useLocalStorage\n","import React, { useState } from 'react'\nimport { Controlled as ControlledEditor } from 'react-codemirror2'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faCompressAlt, faExpandAlt } from '@fortawesome/free-solid-svg-icons'\n\nimport 'codemirror/lib/codemirror.css'\nimport 'codemirror/theme/dracula.css'\nimport 'codemirror/mode/xml/xml'\nimport 'codemirror/mode/javascript/javascript'\nimport 'codemirror/mode/css/css'\n\nconst Editor = ({ displayName, value, onChange, language }) => {\n  const [open, setOpen] = useState(true)\n\n  const handleChange = (editor, data, value) => {\n    onChange(value)\n  }\n  return (\n    <div className={`editor-container ${open ? '' : 'collapsed'}`}>\n      <div className=\"editor-title\">\n        {displayName}\n        <button\n          type=\"button\"\n          className=\"expand-collapse-btn\"\n          onClick={() => setOpen(!open)}\n        >\n          <FontAwesomeIcon icon={open ? faCompressAlt : faExpandAlt} />\n        </button>\n      </div>\n      <ControlledEditor\n        onBeforeChange={handleChange}\n        value={value}\n        className=\"code-mirror-wrapper\"\n        options={{\n          lineWrapping: true,\n          lint: true,\n          mode: language,\n          lineNumbers: true,\n          theme: \"dracula\"\n        }}\n      />\n    </div>\n  )\n}\n\nexport default Editor\n","import React, { useEffect, useState } from 'react'\nimport useLocalStorage from '../hooks/useLocalStorage'\nimport Editor from './Editor'\n\nconst App = () => {\n  const [html, setHtml] = useLocalStorage('')\n  const [css, setCss] = useLocalStorage('')\n  const [js, setJs] = useLocalStorage('')\n  const [srcDoc, setSrcDoc] = useState('')\n\n  useEffect(() => {\n    const timeout = setTimeout(() => {\n      setSrcDoc(`\n        <html>\n          <body>${html}</body>\n          <style>${css}</style>\n          <script>${js}</script>\n        </html>\n      `)\n    }, 500);\n\n    return () => clearTimeout(timeout)\n  }, [html, css, js])\n\n  return (\n    <>\n      <div className=\"pane top-pane\">\n        <Editor\n          language=\"xml\"\n          displayName=\"HTML\"\n          value={html}\n          onChange={setHtml}\n        />\n        <Editor\n          language=\"css\"\n          displayName=\"CSS\"\n          value={css}\n          onChange={setCss}\n        />\n        <Editor\n          language=\"javascript\"\n          displayName=\"JS\"\n          value={js}\n          onChange={setJs}\n        />\n      </div>\n      <div className=\"pane\">\n        <iframe\n          srcDoc={srcDoc}\n          title=\"output\"\n          sandbox=\"allow-scripts\"\n          frameBorder=\"0\"\n          width=\"100%\"\n          height=\"100%\"\n        />\n      </div>\n    </>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport App from './components/App'\nimport './index.css'\n\nReactDOM.render(<App />, document.getElementById(\"root\"))"],"sourceRoot":""}